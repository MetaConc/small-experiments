class PhilosopherBenchmark usingPlatform: platform andHarness: harness = Value (
| private Benchmark = harness Benchmark.
  private actors    = platform actors.
  private Array     = platform kernel Array.
  private TransferArray= platform kernel TransferArray.
  private Vector    = platform kernel Vector.
  private Dictionary= platform collections Dictionary.
  private system    = platform system.
|
)(

  public class Philosophers new: numPhil rounds: numRounds = Benchmark <: Value (
  | private numPhil   = numPhil.
    private numRounds = numRounds.    
  |)(
    private class Counter = (
    | private value ::= 0. |
    )(
      public inc: anInt = ( value := value + anInt. )
      public get = ( ^ value )
    )

    private class PhilosopherActor new: id rounds: rounds counter: aCounter arbitrator: arbitrator = (
    | private localCounter ::= 0.
      private roundsSoFar  ::= 0.
      private id     = id.
      private rounds = rounds.
      private arbitrator = arbitrator.
      private counter    = aCounter.
    |)(
      public denied = (
        localCounter := localCounter + 1.
        arbitrator <-: hungry: self id: id.
      )

      public eat = (
      ('- EAT ' + id) println.
        roundsSoFar := roundsSoFar + 1.
        localCounter > 0 ifTrue: [
          counter <-: inc: localCounter.
          localCounter := 0. ].

        arbitrator <-: done: id.
        roundsSoFar < rounds
          ifTrue:  [ self <-: start ]
          ifFalse: [ arbitrator <-: exit ]
      )

      public start = (
        ('philo '+ id +' start') println.
        arbitrator <-: hungry: self id: id.
      )
    )

    private class ArbitratorActor new: numForks resolver: resolver = (
    | private numForks = numForks.
      private forks    = Array new: numForks withAll: false.
      private numExitedPhilosophers ::= 0.
      private resolver = resolver.
      private abortion ::= false.
    |)(
      public hungry: philosopher id: leftForkId = (
        | rightForkId |
        rightForkId := 1 + (leftForkId % numForks).
       
        ('-left ' + leftForkId) println.
        ('right ' + rightForkId) println.

        abortion ifTrue: [^ self]. 
        ((forks at: leftForkId) or: [forks at: rightForkId])
          ifTrue:  [ philosopher <-: denied ]
          ifFalse: [
          ('-putDownForks ' + leftForkId) println.
            forks at: leftForkId  put: true.
            forks at: rightForkId put: true.
            philosopher <-: eat ]
      )

      public done: leftForkId = (
        | rightForkId |
        rightForkId := 1 + (leftForkId % numForks).

        forks at: leftForkId  put: false.
        forks at: rightForkId put: false.
      )

      public exit = (
        numExitedPhilosophers := numExitedPhilosophers + 1.

        numForks = numExitedPhilosophers ifTrue: [
          | forksTaken |
          forksTaken := 0.
          forks do: [:f | f ifTrue: [ forksTaken := forksTaken + 1 ] ].

          resolver resolve: forksTaken ]
      )

      public abort = (
        abortion := true.
        resolver resolve: 1.
      )
    )

   public benchmark: abortP = ( 
      | counter completionPP arbitrator philosophers done |
      counter := Counter new.
      done := false. 
      completionPP := actors createPromisePair.

      arbitrator := (actors createActorFromValue: ArbitratorActor) <-: new: numPhil resolver: completionPP resolver.

      completionPP promise whenResolved: [ :r|
        done := true.
      ].

      abortP whenResolved: [ :r|
        ((done not) and: (arbitrator notNil)) ifTrue:[
          arbitrator <-: abort.
          'Benchmark timed out' println.
        ]
      ].

      philosophers := Array new: numPhil.
      philosophers doIndexes: [:i |
        | ph |
        ph := (actors createActorFromValue: PhilosopherActor) <-: new: i
                        rounds: numRounds counter: counter arbitrator: arbitrator.
        philosophers at: i put: ph ].

      philosophers do: [:ph | ph <-: start ].

      ^ completionPP promise
    )

    public verifyResult: result = (
      ^ result = 0
    )
  ) : (
    public newInstance: problemSize = (
      | problem |
      problem := problemSize split: ':'.

      ^ self new: (problem at: 1) asInteger
          rounds: (problem at: 2) asInteger
    )

    public setupVerifiedRun: run = (
      run problemSize: '5:5'
    )
  )
)