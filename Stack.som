class StackApp usingPlatform: platform = Value (
| private Array    = platform kernel Array.
  private actors    = platform actors.
  private Vector    = platform kernel Vector.
|)(

  private class Stack new: length = (
  | private waitingPush = Vector new.
    private waitingPop  = Vector new.
    private stackArray  = Array new: length.
    private counter ::= 0.
  |)(

    public push: x = (
      | p |
      stackArray size = counter
        ifTrue: [
          'waiting for pop...because stack is full' println.
          p := waitPush.
          p whenResolved: [: value | push: x ] ]
        ifFalse: [
          'push ' print.
          x println.
          counter := counter + 1.
          stackArray at: counter put: x.
          notifyPop ]
    )

    public waitPush = (
      | pair p r |
      pair := actors createPromisePair.
      r := pair resolver.
      p := pair promise.
      waitingPush append: r.
      ^ p
    )

    public notifyPush = (
      | r |
      waitingPush isEmpty
        ifFalse: [
          'notify push' println.
          r := waitingPush at: 1.
          r resolve: true.
          waitingPush removeFirst.
        ]
    )

    public pop = (
      | p val |
      counter = 0
        ifTrue: [
          'waiting for a push, stack is empty' println.
          p := waitPop.
          ^ p whenResolved: [: value | pop ] ]
        ifFalse: [
          val := stackArray at: counter.
          'pop ' print.
          val println.
          counter := counter - 1.
          notifyPush.
          ^ val ]
    )

    public waitPop = (
      | pair p r |
      pair := actors createPromisePair.
      r := pair resolver.
      p := pair promise.
      waitingPop append: r.
      ^ p
    )

    public notifyPop = (
      | r |
      waitingPop isEmpty ifFalse: [
        'notify pop' println.
        r := waitingPop at: 1.
        r resolve: true.
        waitingPop removeFirst ]
    )
  )

  public main: args = (
    | p |
    'Hello Stack!' println.
    p := testAsyncStack.
    'testAsyncStack Done' println.
    ^ p
  )

  public testAsyncStack = (
    | stack pair r p promise1 promise2 promise3 promise4 promise5 |
    pair := actors createPromisePair.
    r := pair resolver.
    p := pair promise.

    stack := Stack new: 2.

    promise1 :=  stack <-: push: 1.
    promise2 :=  stack <-: push: 2.
    promise3 :=  stack <-: push: 3.

    promise3 whenResolved: [: value |
      promise4 := stack <-: pop.
      promise4 whenResolved: [: v |
        'second pop- ' print.
        v println.
        r resolve: true
        ]
    ].

    promise5 := stack <-: pop.
    promise5 whenResolved: [: vl |
      'first pop- ' print.
      vl println.
    ].

    ^ p
  )
)
